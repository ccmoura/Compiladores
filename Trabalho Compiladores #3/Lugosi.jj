PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
    Lugosi parser = new Lugosi(new FileInputStream(args[0]));
    parser.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APAREN: "(">
| <FPAREN: ")">
| <VAR: "var">
| <TIPO: ("int" | "bool")>
| <PV: ";">
| <ATRIB: ":=">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <V: ",">
| <PRINT: "print">
| <FUNCTION: "function">
| <OP: ("+" | "-" | "*" | "/" | "||" | "&&" | "<" | ">" | "==")>
| <BOOLEAN: ("true" | "false")>
| <TOKEN_ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")*>
| <TOKEN_NUM: (["0"-"9"])+ ("."(["0"-"9"])+)? ("E" ("+" | "-")? (["0"-"9"])+)?>
}


TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>

}



void Lugosi () :
{}
{ 

  Main() 
  (Func())?
  <EOF> 
}
	

void Main ():
{}
{
 <MAIN> <ACHAVES> 
 
 VarDecl()
 SeqComandos()

 <FCHAVES>

}

void Func():
{}
{
 (<FUNCTION> <TIPO> <TOKEN_ID> <APAREN> (ListaArg())? <FPAREN> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+
}

void ListaArg():
{}
{
 <TIPO> <TOKEN_ID> (<PV> ListaArg())?
}

void SeqComandos():
{}
{
 (Comando())*
}

void Comando():
{}
{
(<TOKEN_ID> Comandox())
| (<IF> <APAREN> Exp() <FPAREN> <ACHAVES> SeqComandos() <FCHAVES> <PV>)
| (<WHILE> <APAREN> Exp() <FPAREN> <DO> <ACHAVES> SeqComandos() <FCHAVES> <PV>)
| (<DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> <APAREN> Exp() <FPAREN> <PV>)
| (<RETURN> Exp() <PV>)
| (<PRINT> <APAREN> Exp() <FPAREN> <PV>)
}
void Comandox():
{}
{
 (<ATRIB> Exp() <PV>)
| (<APAREN> ListaExp() <FPAREN> <PV>)
}
void ListaExp():
{}
{
 Exp() ListaExpx()
}


void ListaExpx():
{}
{
 (<V> Exp() ListaExpx())?
}
void VarDecl():
{}
{
 (<VAR> <TIPO> <TOKEN_ID> <PV>)*
}

void Exp():
{}
{
 (<APAREN> Exp() <OP> Exp() <FPAREN>) | Fator()
}

void Fator():
{}
{
 (<TOKEN_ID> Fatorx()) | <TOKEN_NUM> | <BOOLEAN>
}

void Fatorx():
{}
{
  (<APAREN> (ListaExp())? <FPAREN>)?
}



